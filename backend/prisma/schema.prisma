generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model applications {
  id          String @id @map("_id")
  description String
  name        String
}

model Applicant {
  id                String        @id @map("_id")
  applicationNumber String
  applicantNumber   String
  firstName         String
  lastName          String
  employer          String
  employedSince     DateTime
  birthday          DateTime
  address           Address[]
  business          Business
  employment        Employment
  maritalStatus     MaritalStatus
}

model Financing {
  id                String         @id @map("_id")
  applicationNumber String
  financingNeeds    Float
  ownResources      OwnResources?
  purchaceCosts     PurchaceCosts?
  loans             Loan[]
  ownResourcesId    String         @unique
  purchaceCostsId   String         @unique
}

model Household {
  id                  String           @id @map("_id")
  applicationNumber   String
  adultsInHousehold   Int
  childrenInHousehold Int
  iban                String
  bic                 String
  earningCapacity     EarningCapacity?
  monthlyExpenses     MonthlyExpenses?
}

// Auxiliary models

model Address {
  id          String    @id @map("_id")
  applicant   Applicant @relation(fields: [applicantId], references: [id])
  applicantId String
  userId      String
  street      String
  city        String
  postCode    String

}

enum Business {
  BANKING
  INSURANCE
  ENERGY
  CONSTRUCTION
  AGRICULTURE
  INDUSTRY
  PUBLIC_SERVICE
  OTHER
}

enum Employment {
  EMPLOYEE
  OFFICIAL
  PENSIONER
  STUDENT
  TRAINEE
  FREELANCER
  UNEMPLOYED
  OTHER
}

enum MaritalStatus {
  MARRIED
  SINGLE
  DIVORCED
  WIDOWED
}

model Loan {
  id                       String     @id @map("_id")
  loanAmount               Float
  interestRate             Float
  repaymentInPercent       Float
  fixedInterestRateInYears Float
  Financing                Financing? @relation(fields: [financingId], references: [id])
  financingId              String?
}

model OwnResources {
  id                         String     @id @map("_id")
  liquidAssets               Float
  balanceFromBuildingSociety Float
  ownManpower                Float
  Financing                  Financing? @relation(fields: [financingId], references: [id])
  financingId                String?    @unique
}

model PurchaceCosts {
  id                        String    @id @map("_id")
  priceOfLand               Float
  reconstructionCosts       Float
  additionalPurchaseCharges Float
  Financing                 Financing @relation(fields: [financingId], references: [id])
  financingId               String    @unique
}

model EarningCapacity {
  id                           String    @id @map("_id")
  salaryFirstApplicant         Float
  salarySecondApplicant        Float
  rentalIncomeFinancedProperty Float
  rentalIncomeOtherProperties  Float
  furtherIncome                Float
  childBenefit                 Float
  assetsOnBankAccounts         Float
  assetsOther                  Float
  Household                    Household @relation(fields: [householdId], references: [id])
  householdId                  String    @unique
}

model MonthlyExpenses {
  id                             String    @id @map("_id")
  healthInsuranceFirstApplicant  Float
  healthInsuranceSecondApplicant Float
  otherLoansRemainderOfDebt      Float
  otherLoansMonthlyRepayments    Float
  costOfLiving                   Float
  rent                           Float
  rentNotApplicableInFuture      Boolean
  Household                      Household @relation(fields: [householdId], references: [id])
  householdId                    String    @unique

}
